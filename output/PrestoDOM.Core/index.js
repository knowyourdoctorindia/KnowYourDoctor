// Generated by purs version 0.11.7
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var DOM = require("../DOM");
var DOM_Node_Types = require("../DOM.Node.Types");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_StrMap = require("../Data.StrMap");
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var FRP = require("../FRP");
var FRP_Behavior = require("../FRP.Behavior");
var FRP_Event = require("../FRP.Event");
var Halogen_VDom = require("../Halogen.VDom");
var Halogen_VDom_DOM = require("../Halogen.VDom.DOM");
var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine");
var Prelude = require("../Prelude");
var PrestoDOM_Types_Core = require("../PrestoDOM.Types.Core");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var patchAndRun = function (state) {
    return function (myDom) {
        return function __do() {
            var v = $foreign.getLatestMachine();
            var v1 = Halogen_VDom_Machine.step(v)(myDom(state))();
            return $foreign.storeMachine(v1)();
        };
    };
};
var mapDom = function (view) {
    return function (push) {
        return function (state) {
            return function (actionMap) {
                return function ($23) {
                    return view(function ($24) {
                        return push(actionMap($24));
                    })(state)(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)($23));
                };
            };
        };
    };
};
var buildAttributes = function (elem) {
    var done = function (attrs) {
        return $foreign.cleanupAttributes(elem)(attrs);
    };
    var patch = function (attrs1) {
        return function (attrs2) {
            return function __do() {
                var v = $foreign.patchAttributes(elem)(attrs1)(attrs2)();
                return new Halogen_VDom_Machine.Step(Data_Unit.unit, patch(v), done(v));
            };
        };
    };
    var apply = function (attrs) {
        return function __do() {
            var v = $foreign.applyAttributes(elem)(attrs)();
            return new Halogen_VDom_Machine.Step(Data_Unit.unit, patch(v), done(v));
        };
    };
    return apply;
};
var spec = function (document) {
    return {
        buildWidget: Data_Function["const"](Halogen_VDom_Machine.never(Control_Monad_Eff.applicativeEff)),
        buildAttributes: buildAttributes,
        document: document
    };
};
var runScreen = function (v) {
    return function (cb) {
        return function __do() {
            var v1 = FRP_Event.create();
            var v2 = $foreign.getRootNode();
            var v3 = Halogen_VDom_DOM.buildVDom(spec(v2))(v.view(v1.push)(v.initialState))();
            $foreign.storeMachine(v3)();
            $foreign.insertDom(v2)(Halogen_VDom_Machine.extract(v3))();
            var stateBeh = FRP_Behavior.unfold(FRP_Event.eventIsEvent)(function (action) {
                return function (eitherState) {
                    return Control_Bind.bind(Data_Either.bindEither)(eitherState)(v["eval"](action));
                };
            })(v1.event)(new Data_Either.Right(v.initialState));
            var v4 = FRP_Event.subscribe(FRP_Behavior.sample_(FRP_Event.eventIsEvent)(stateBeh)(v1.event))(function (eitherState) {
                return Data_Either.either(cb)(function (state) {
                    return Control_Apply.applySecond(Control_Monad_Eff.applyEff)(patchAndRun(state)(v.view(v1.push)))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit));
                })(eitherState);
            })();
            return Data_Unit.unit;
        };
    };
};
module.exports = {
    buildAttributes: buildAttributes,
    spec: spec,
    patchAndRun: patchAndRun,
    runScreen: runScreen,
    mapDom: mapDom,
    logNode: $foreign.logNode,
    applyAttributes: $foreign.applyAttributes,
    done: $foreign.done,
    patchAttributes: $foreign.patchAttributes,
    cleanupAttributes: $foreign.cleanupAttributes,
    getLatestMachine: $foreign.getLatestMachine,
    storeMachine: $foreign.storeMachine,
    getRootNode: $foreign.getRootNode,
    insertDom: $foreign.insertDom
};
