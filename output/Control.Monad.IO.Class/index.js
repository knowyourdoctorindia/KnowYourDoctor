// Generated by purs version 0.11.7
"use strict";
var Control_Category = require("../Control.Category");
var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans");
var Control_Monad_IO = require("../Control.Monad.IO");
var Control_Monad_List_Trans = require("../Control.Monad.List.Trans");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Monoid = require("../Data.Monoid");
var Prelude = require("../Prelude");
var MonadIO = function (Monad0, liftIO) {
    this.Monad0 = Monad0;
    this.liftIO = liftIO;
};
var monadIOIO = new MonadIO(function () {
    return Control_Monad_IO.monadIO;
}, Control_Category.id(Control_Category.categoryFn));
var liftIO = function (dict) {
    return dict.liftIO;
};
var monadIOContT = function (dictMonadIO) {
    return new MonadIO(function () {
        return Control_Monad_Cont_Trans.monadContT(dictMonadIO.Monad0());
    }, function ($10) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Cont_Trans.monadTransContT)(dictMonadIO.Monad0())(liftIO(dictMonadIO)($10));
    });
};
var monadIOExceptT = function (dictMonadIO) {
    return new MonadIO(function () {
        return Control_Monad_Except_Trans.monadExceptT(dictMonadIO.Monad0());
    }, function ($11) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(dictMonadIO.Monad0())(liftIO(dictMonadIO)($11));
    });
};
var monadIOListT = function (dictMonadIO) {
    return new MonadIO(function () {
        return Control_Monad_List_Trans.monadListT(dictMonadIO.Monad0());
    }, function ($12) {
        return Control_Monad_Trans_Class.lift(Control_Monad_List_Trans.monadTransListT)(dictMonadIO.Monad0())(liftIO(dictMonadIO)($12));
    });
};
var monadIOMaybe = function (dictMonadIO) {
    return new MonadIO(function () {
        return Control_Monad_Maybe_Trans.monadMaybeT(dictMonadIO.Monad0());
    }, function ($13) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(dictMonadIO.Monad0())(liftIO(dictMonadIO)($13));
    });
};
var monadIORWS = function (dictMonadIO) {
    return function (dictMonoid) {
        return new MonadIO(function () {
            return Control_Monad_RWS_Trans.monadRWST(dictMonadIO.Monad0())(dictMonoid);
        }, function ($14) {
            return Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))(dictMonadIO.Monad0())(liftIO(dictMonadIO)($14));
        });
    };
};
var monadIOReader = function (dictMonadIO) {
    return new MonadIO(function () {
        return Control_Monad_Reader_Trans.monadReaderT(dictMonadIO.Monad0());
    }, function ($15) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonadIO.Monad0())(liftIO(dictMonadIO)($15));
    });
};
var monadIOState = function (dictMonadIO) {
    return new MonadIO(function () {
        return Control_Monad_State_Trans.monadStateT(dictMonadIO.Monad0());
    }, function ($16) {
        return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadIO.Monad0())(liftIO(dictMonadIO)($16));
    });
};
var monadIOWriter = function (dictMonadIO) {
    return function (dictMonoid) {
        return new MonadIO(function () {
            return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictMonadIO.Monad0());
        }, function ($17) {
            return Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))(dictMonadIO.Monad0())(liftIO(dictMonadIO)($17));
        });
    };
};
module.exports = {
    liftIO: liftIO,
    MonadIO: MonadIO,
    monadIOIO: monadIOIO,
    monadIOContT: monadIOContT,
    monadIOExceptT: monadIOExceptT,
    monadIOListT: monadIOListT,
    monadIOMaybe: monadIOMaybe,
    monadIOReader: monadIOReader,
    monadIORWS: monadIORWS,
    monadIOState: monadIOState,
    monadIOWriter: monadIOWriter
};
